#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\options handout
\use_default_options false
\language french
\inputencoding auto
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry false
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Copyright 2009, Dominique Dumont <domi.dumont@free.fr>.
 
\end_layout

\begin_layout Plain Layout
This file can be redistributed and/or modified under the terms of the GNU
 Public License, version 2.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
Faciliter la configuration d'un logiciel avec Config::Model
\begin_inset OptArg
status open

\begin_layout Plain Layout
Config::Model
\begin_inset Note Note
status open

\begin_layout Plain Layout
(facultatif, à utiliser uniquement si le titre de l'article est trop long)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Author
Dominique
\begin_inset space ~
\end_inset

Dumont
\end_layout

\begin_layout Institute
Hewlett-Packard
\end_layout

\begin_layout Date
French Perl Workshop, Paris 2009
\begin_inset OptArg
status open

\begin_layout Plain Layout
FPW 2009
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Creates new slides with notes.
 Can use also {show only notes}.
 See beameruserguide p187
\end_layout

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
setbeameroption{show notes}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Outline
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Plain Layout
- Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Plain Layout
- At *most* three subsections per section.
 
\end_layout

\begin_layout Plain Layout
- Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Plain Layout
- A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Plain Layout
- In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Plain Layout
- If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Motivation
\end_layout

\begin_layout Subsection
Les problèmes classiques de la configuration
\end_layout

\begin_layout BeginFrame
La config, c'est souvent pénible !
\end_layout

\begin_layout Standard
Pour un utilisateur, éditer la configuration est souvent difficile:
\end_layout

\begin_layout Itemize
Edition d'un fichier texte en dehors de 
\family roman
/home
\end_layout

\begin_layout Itemize
Lecture de pages de manuel
\end_layout

\begin_layout Itemize
Assurer la cohérence
\end_layout

\begin_layout Itemize
Encore plus délicat lors des mises-à-jour de paquets
\end_layout

\begin_layout Subsection
Objectifs
\end_layout

\begin_layout BeginFrame
Objectif 1: faciliter la configuration pour les utilisateurs
\end_layout

\begin_layout Standard
Fournir une interface graphique avec:
\end_layout

\begin_layout Itemize
Aide intégrée
\end_layout

\begin_layout Itemize
Rappel des valeurs par défaut
\end_layout

\begin_layout Itemize
Validation des données de configuration
\end_layout

\begin_layout Itemize
Gestion des mises-à-jour (config upgrade)
\end_layout

\begin_layout Itemize
Différents niveaux d'expertise 
\shape italic
\size footnotesize
(du débutant au grand maître)
\end_layout

\begin_layout Itemize
Recherche
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Tout ceci existe plus ou moins:
\end_layout

\begin_deeper
\begin_layout Itemize
Webmin
\end_layout

\begin_layout NoteItem
Webmin: Interface web commune avec une API définie.
 Mais ça ne fournit que la partie interface.
 Toute la validation (le code métier) est spécifique à chaque application.
 Ce qui risque de poser des problèmes de synchronisation avec l'application
 cible et des soucis de maintenance.
 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Windows registry
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Elektra
\end_layout

\begin_layout NoteItem
Elektra force les projets à adopter une API commune pour accéder aux fichiers
 de config.
 C'est beaucoup trop intrusif pour être accepté par les projets, même en
 fournissant les patches qui vont bien.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Objectif 2: ne pas compliquer la vie des développeurs
\end_layout

\begin_layout Itemize
La logique de validation des données de config soit rester facile à maintenir:
\end_layout

\begin_deeper
\begin_layout Itemize
Éviter le code dédié à la validation des données (e.g.
 ne pas refaire un Webmin)
\end_layout

\begin_layout Itemize
Baser la validation sur des «méta-données»: le modèle de configuration
\end_layout

\begin_deeper
\begin_layout NoteItem
Les données sont beaucoup plus facile à maintenir que du code
\end_layout

\end_deeper
\begin_layout Itemize
Générer les interfaces (graphiques ou pas) à partir du modèle
\end_layout

\begin_layout Itemize
Faciliter les mises-à-jour de la configuration des utilisateurs
\end_layout

\begin_deeper
\begin_layout NoteItem
Non à la prolifération des fichiers rpmsave !
\end_layout

\end_deeper
\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize
Minimiser le code requis pour lire ou écrire les fichiers de configuration:
\end_layout

\begin_deeper
\begin_layout Itemize
Utiliser les librairies existantes (Config::Ini, Config::Augeas...)
\end_layout

\begin_layout Itemize
Fournir des classes pour aider à la lecture et écriture 
\end_layout

\end_deeper
\begin_layout Section
Les principes de Config::Model
\end_layout

\begin_layout BeginFrame
Schéma de Config::Model
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename 3_tier.png
	width 80page%

\end_inset


\end_layout

\begin_layout BeginFrame
C'est quoi un modèle ?
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Standard
Un modèle définit une structure en arbre:
\end_layout

\begin_layout Itemize
Chaque nœud est une classe
\end_layout

\begin_layout Itemize
Chaque feuille est un paramètre
\end_layout

\begin_layout Standard
Chaque classe contient :
\end_layout

\begin_layout Itemize
un ensemble d'éléments (les paramètres)
\end_layout

\begin_layout Itemize
en option: une spécification pour l'accès au fichier de conf (
\emph on
backend)
\end_layout

\begin_layout Column
5cm
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename class.png
	width 100col%

\end_inset


\end_layout

\end_deeper
\begin_layout BeginFrame
Un élément
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Standard
Chaque élément a:
\end_layout

\begin_layout Itemize
un type (
\emph on
leaf, hash, list, node
\emph default
)
\end_layout

\begin_layout Itemize
des contraintes (
\emph on
entier, max, mini
\emph default
 ...
 )
\end_layout

\begin_layout Itemize
une valeur par défaut
\end_layout

\begin_layout Itemize
une description et un résumé (pour l'aide en ligne)
\end_layout

\begin_layout Itemize
un niveau d'expérience (
\emph on
beginner, advanced master
\emph default
)
\end_layout

\begin_layout Itemize
un statut (normal ou obsolète)
\end_layout

\begin_layout Column
5cm
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename element.png
	width 100col%

\end_inset


\end_layout

\end_deeper
\begin_layout BeginFrame
Élément complexe
\end_layout

\begin_layout Standard
Un modèle de configuration peut aussi définir des interactions entre les
 éléments:
\end_layout

\begin_layout Itemize
Déformation du modèle (exemple: avec Xorg, les options d'un pilote changent
 en fonction du pilote déclaré) (
\emph on
warp
\emph default
)
\end_layout

\begin_layout Itemize
Calcul simples à partir d'autres paramètres (utiles pour les mises-à-jour)
 (
\emph on
compute
\emph default
 et 
\emph on
migrate_from
\emph default
)
\end_layout

\begin_layout Itemize
Des références (exemple: dans Xorg::Device::Radeon, Monitor-DVI-0 doit choisir
 un des moniteurs déclarés dans la section Monitor)
\end_layout

\begin_layout NoteItem
Les exemple Xorg s'appuient sur Xorg 1.4 et peuvent ne plus être valables
 pour Xorg 1.5 ou 1.6
\end_layout

\begin_layout Section
Créer un modèle de configuration
\end_layout

\begin_layout BeginFrame
Modèle: analyse
\end_layout

\begin_layout Itemize
Lire les pages de manuel de l'application:
\end_layout

\begin_deeper
\begin_layout Itemize
Trouver la structure 
\end_layout

\begin_layout Itemize
Identifier les paramètres, leur contraintes et relations
\end_layout

\end_deeper
\begin_layout Itemize
Trouver plusieurs exemples valides:
\end_layout

\begin_deeper
\begin_layout Itemize
Pour vérifier qu'on a comprit la documentation
\end_layout

\begin_layout Itemize
Pour les tests de non-régression
\end_layout

\end_deeper
\begin_layout BeginFrame
Modèle: déclaration
\end_layout

\begin_layout Standard
En gros, on traduit la documentation en un format compréhensible par Config::Mod
el:
\end_layout

\begin_layout Itemize
La structure va se traduire en 
\emph on
classes de configuration
\end_layout

\begin_layout Itemize
Les paramètres de configuration en éléments
\end_layout

\begin_layout Itemize
Les contraintes en attributs des éléments
\end_layout

\begin_layout NoteItem
Certaines contraintes révèlent que la config a une structure plus complexe
 qu'un arbre.
 Cette structure ressemble plus à un graph.
 La déclaration de valeur de type référence peut être nécessaire pour ces
 structures plus complexes.
\end_layout

\begin_layout LyX-Code

\size footnotesize
name => 'Ssh',             # class name
\end_layout

\begin_layout LyX-Code

\size footnotesize
element => [
\end_layout

\begin_layout LyX-Code

\size footnotesize
  EnableSSHKeysign => {    # element name
\end_layout

\begin_layout LyX-Code

\size footnotesize
    type => 'leaf',
\end_layout

\begin_layout LyX-Code

\size footnotesize
    value_type => 'boolean', 
\end_layout

\begin_layout LyX-Code

\size footnotesize
    built_in => '0',       # default value
\end_layout

\begin_layout LyX-Code

\size footnotesize
    description => 'Setting ...',
\end_layout

\begin_layout LyX-Code

\size footnotesize
  },
\end_layout

\begin_layout LyX-Code

\size footnotesize
] 
\end_layout

\begin_layout BeginFrame
Déclaration (en plus facile)
\end_layout

\begin_layout Standard
Comme écrire une structure de donnée n'est pas drôle (même en Perl).
 On peut créer le modèle avec une GUI:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename edit-model.png
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
Ne pas oublier, de temps en temps, Menu → Model → test ☺
\end_layout

\begin_layout BeginFrame
Comment lire les fichiers
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Dans le modèle}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Déclarer la méthode (
\emph on
backend
\emph default
)
\end_layout

\begin_deeper
\begin_layout Itemize
Fournie (fichier Perl, Ini...)
\end_layout

\begin_layout Itemize
Plug-in (classe 
\emph on
Backend
\emph default
)
\end_layout

\begin_layout Itemize
Spécifique (
\emph on
custom
\emph default
 → call-back à écrire )
\end_layout

\end_deeper
\begin_layout Itemize
Les paramètres 
\end_layout

\begin_layout Itemize
Les spécifications sont essayées dans l'ordre
\end_layout

\end_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Exemple}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code

\size scriptsize
\begin_inset Graphics
	filename read-config.png
	width 80col%

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout BeginFrame
Comment écrire les fichiers
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Dans le modèle}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Inutile si la spécification est identique à celle de la lecture
\end_layout

\begin_layout Itemize
Même paramètres que pour la lecture
\end_layout

\begin_layout Itemize
Essayées dans l'ordre jusqu'au premier succès
\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{A noter}
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
Ces spécifications permettent de migrer une configuration d'une syntaxe
 à une autre
\end_layout

\begin_layout Column
6cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Exemple}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code

\size scriptsize
write_config => [
\end_layout

\begin_layout LyX-Code

\size scriptsize
 {
\end_layout

\begin_layout LyX-Code

\size scriptsize
  backend     => 'augeas',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  save        => 'backup',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  config_dir  => '/etc/ssh',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  file        => 'sshd_config',
\end_layout

\begin_layout LyX-Code

\size scriptsize
 },
\end_layout

\begin_layout LyX-Code

\size scriptsize
 {
\end_layout

\begin_layout LyX-Code

\size scriptsize
  backend    => 'custom',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  class      => 'C::M::OpenSsh',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  function   => 'sshd_write',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  config_dir => '/etc/ssh'
\end_layout

\begin_layout LyX-Code

\size scriptsize
 }
\end_layout

\begin_layout LyX-Code

\size scriptsize
],
\size default
 
\end_layout

\end_deeper
\end_deeper
\begin_layout BeginFrame
Prévoir pour les mises-à-jour des config
\end_layout

\begin_layout FrameSubtitle
Pour des évolutions transparentes
\end_layout

\begin_layout Standard
Pour les concepteurs d'application:
\end_layout

\begin_layout Enumerate
Pas de nouveaux paramètres
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
↔ pas de nouveaux problèmes
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Enumerate
Choix des noms et valeurs
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
Un bon paramètre vaut mieux que 3 pages de doc
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Enumerate
Valeur par défaut
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
Fonctionne même avec un fichier vide
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
Mais, si il le faut, le modèle peut spécifier:
\end_layout

\begin_layout Itemize
comment remplacer une valeur
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout

\emph on
replace
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
des paramètres obsolètes
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout

\emph on
status
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
comment migrer une valeur
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout

\emph on
migrate
\emph default
 avec une formule de calcul
\end_layout

\end_inset


\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
Pour plus d'informations sur les migrations appliquées aux paquets, voir
 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.debian.org/PackageConfigUpgrade
\end_layout

\end_inset


\end_layout

\begin_layout Section
Vu de l'utilisateur
\end_layout

\begin_layout BeginFrame
Utilisation
\end_layout

\begin_layout FrameSubtitle
interface graphique
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename config-edit-sshd-tk.png
	width 80text%

\end_inset


\end_layout

\begin_layout Standard
Note: Menu 
\emph on
Option → experience
\emph default
 pour révéler plus de paramètres
\end_layout

\begin_layout BeginFrame
Utilisation
\end_layout

\begin_layout FrameSubtitle
interface curses
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename config-edit-sshd-curses.png
	width 60text%

\end_inset


\end_layout

\begin_layout BeginFrame
Utilisation
\end_layout

\begin_layout FrameSubtitle
interface shell
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename config-edit-sshd-shell.png
	width 80text%

\end_inset


\end_layout

\begin_layout BeginFrame
Utilisation
\end_layout

\begin_layout FrameSubtitle
Pour les programmes
\end_layout

\begin_layout Standard
En ligne de commande:
\end_layout

\begin_layout LyX-Code

\size footnotesize
$ sudo config-edit-sshd -ui none PermitRootLogin=no 
\end_layout

\begin_layout LyX-Code

\size footnotesize
2009/05/15 14:03:28 load model Config/Model/models/Sshd.pl  
\end_layout

\begin_layout LyX-Code

\size footnotesize
2009/05/15 14:03:28 Creating class Sshd
\end_layout

\begin_layout LyX-Code

\size footnotesize
2009/05/15 14:03:29 Backing up file /etc/ssh/sshd_config
\end_layout

\begin_layout LyX-Code

\size footnotesize
2009/05/15 14:03:29 writing config file /etc/ssh/sshd_config 
\end_layout

\begin_layout Standard
En Perl:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ sudo perl -MConfig::Model -e '
\end_layout

\begin_layout LyX-Code

\size scriptsize
  my $i = Config::Model -> new -> instance(root_class_name=>"Sshd");
\end_layout

\begin_layout LyX-Code

\size scriptsize
  $i->config_root->load("PermitRootLogin=no");
\end_layout

\begin_layout LyX-Code

\size scriptsize
  $i->write_back;'
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout BeginFrame
État des lieux
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Modèles dispos}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
OpenSsh
\end_layout

\begin_layout Itemize
Approx
\end_layout

\begin_layout Itemize
Config::Model
\end_layout

\begin_layout Itemize

\family typewriter
\size scriptsize
Xorg 
\end_layout

\begin_layout NoteItem
Out: exim (langage) et autres formats très complexes
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Backend}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Windows INI
\end_layout

\begin_layout Itemize
Perl
\end_layout

\begin_layout Itemize
cds
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
 (spécifique Config::Model)
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Augeas
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Communauté}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Paquets Debian
\end_layout

\begin_layout Itemize
Paquets Rpm en préparation
\end_layout

\begin_layout Itemize
Proposition pour 
\emph on
dh_config 
\emph default
(mise-à-jour paquets)
\end_layout

\begin_layout Itemize
article dans GNULinux Mag
\end_layout

\end_deeper
\begin_layout BeginFrame
Les futurs projets
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Interfaces}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Interface web
\end_layout

\begin_layout Itemize

\emph on
Wizard
\emph default
 pour la GUI
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{backend}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
JSON
\end_layout

\begin_layout Itemize
XML
\end_layout

\end_deeper
\end_deeper
\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Et vous ?}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Config::Model a besoin d'aide:
\end_layout

\begin_layout Itemize
Intégration dans les distros
\end_layout

\begin_layout Itemize
Configuration multi-niveaux 
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
projet Debian pure-blend
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Mécanisme de plug-in pour les modèles
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
pour les application avec plug-in
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Mécanisme a définir pour les applications qui injectent de la config dans
 un framework
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
Exemple: mercurial dans apache
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout BeginFrame
Liens
\end_layout

\begin_layout BeginFrame
Démo ?
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
