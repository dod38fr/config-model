#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
% \setbeameroption{show only notes}

\usepackage{ifthen}
%\newcommand{\showotherui}{true}
\newcommand{\showotherui}{false}
%\newcommand{\showadvanced}{true}
\newcommand{\showadvanced}{false}
\newcommand{\showaugeas}{false}
\newcommand{\showreadwrite}{false}
\newcommand{\showpackageupgrade}{true}
\newcommand{\showhairyupgrade}{false}
\end_preamble
\options handout
\use_default_options false
\language american
\inputencoding utf8
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language swedish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Copyright 2009-2010, Dominique Dumont <domi.dumont@free.fr>.
 
\end_layout

\begin_layout Plain Layout
This file can be redistributed and/or modified under the terms of the GNU
 Public License, version 2.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
Config::Model and configuration upgrades during package upgrade
\begin_inset OptArg
status open

\begin_layout Plain Layout
Config::Model
\end_layout

\end_inset


\end_layout

\begin_layout Author
Dominique
\begin_inset space ~
\end_inset

Dumont
\end_layout

\begin_layout Institute
Debian Perl Group
\end_layout

\begin_layout Date
Feb 2011
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    %
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

%}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang french
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Outline
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\lang french
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Plain Layout

\lang french
- Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Plain Layout

\lang french
- At *most* three subsections per section.
 
\end_layout

\begin_layout Plain Layout

\lang french
- Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Plain Layout

\lang french
- A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Plain Layout

\lang french
- In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Plain Layout

\lang french
- If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Why
\end_layout

\begin_layout Subsection
Configuration upgrade problems
\end_layout

\begin_layout BeginFrame
Configuration is often painful!
\end_layout

\begin_layout Standard
Configuration upgrade is often difficult for a user:
\end_layout

\begin_layout Itemize
Surprise question during upgrade
\end_layout

\begin_layout Itemize
Edit a text file outside of 
\family roman
/home
\end_layout

\begin_layout Itemize
Read man pages
\end_layout

\begin_layout Itemize
Ensure consistency
\end_layout

\begin_layout Itemize
Leave spurious files
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
Basic configuration may also be difficult...
\end_layout

\begin_layout Subsection
Objectives
\end_layout

\begin_layout BeginFrame
Objective 1: Make configuration easier for users
\end_layout

\begin_layout Standard
Handle configuration upgrade smoothly (mostly no interaction)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
Provide a graphical interface with:
\end_layout

\begin_layout Itemize
Integrated help
\end_layout

\begin_layout Itemize
Default values
\end_layout

\begin_layout Itemize
Validation of configuration data
\end_layout

\begin_layout Itemize
Several levels of skills 
\shape italic
\size footnotesize
(from beginner to master)
\end_layout

\begin_layout Itemize
Search
\end_layout

\begin_layout BeginFrame
Objective 2: Make maintenance easy for developers
\end_layout

\begin_layout Itemize
Configuration tool and upgrader must be easy to maintain:
\end_layout

\begin_deeper
\begin_layout Itemize
Avoid ad-hoc validation code (e.g.
 don't rewrite Webmin)
\end_layout

\begin_layout Itemize
Base validation on 
\begin_inset Quotes sld
\end_inset

meta-data
\begin_inset Quotes srd
\end_inset

: the 
\emph on
configuration model
\end_layout

\begin_deeper
\begin_layout NoteItem
Data are much easier to maintain than code
\end_layout

\end_deeper
\begin_layout Itemize
Generate interfaces (graphicals or not) from the model
\end_layout

\begin_layout Itemize
Model contains properties to upgrade configuration
\end_layout

\begin_layout Itemize
GUI to create and maintain models
\end_layout

\begin_deeper
\begin_layout NoteItem
Avoid rpmsave file proliferation
\end_layout

\end_deeper
\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize
Minimise code required to read or write configuration files:
\end_layout

\begin_deeper
\begin_layout Itemize
Use existing libraries (Config::Ini, Config::Augeas -- and all Augeas lenses...)
\end_layout

\begin_layout Itemize
Provide basic classes to help configuration reads and writes
\end_layout

\end_deeper
\begin_layout Section
Config::Model 
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout BeginFrame
Config::Model design
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename 3_tier_en.png
	width 90theight%

\end_inset


\end_layout

\begin_layout BeginFrame
What is a model?
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Standard
Config is represented in a tree.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
The model defines its structure:
\end_layout

\begin_layout Itemize
A class is represented by a node
\end_layout

\begin_layout Itemize
A parameter is represented by a leaf
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
Each class contains:
\end_layout

\begin_layout Itemize
a set of elements (parameters)
\end_layout

\begin_layout Itemize
optional: a specification to access configuration file (backend)
\end_layout

\begin_layout Column
5cm
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename class.png
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\align center
model GUI
\end_layout

\end_deeper
\begin_layout BeginFrame
Simple elements
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
6cm
\end_layout

\begin_layout Standard
Each element has:
\end_layout

\begin_layout Itemize
a type (leaf, hash, list, node)
\end_layout

\begin_layout Itemize
constraints (integer, max, mini ...
 )
\end_layout

\begin_layout Itemize
a default value
\end_layout

\begin_layout Itemize
a description and a summary (for integrated help)
\end_layout

\begin_layout Itemize
an experience level (beginner, advanced, master)
\end_layout

\begin_layout Itemize
a status (normal or obsolete)
\end_layout

\begin_layout Column
5cm
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename element.png
	width 100col%

\end_inset


\end_layout

\begin_layout Standard
\align center
Model GUI
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifthenelse{
\backslash
equal{
\backslash
showadvanced}{true}}{
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Complex elements
\end_layout

\begin_layout Standard
A configuration model can also define interactions between elements:
\end_layout

\begin_layout Itemize
Model warp (example: Xorg driver options change depending on declared driver)
 (
\emph on
warp
\emph default
)
\end_layout

\begin_layout Itemize
Simple computation from other elements (used for upgrades) (
\emph on
compute
\emph default
 and 
\emph on
migrate_from
\emph default
)
\end_layout

\begin_layout Itemize
References (example: Xorg::Device::Radeon, Monitor-DVI-0 must refer to one
 of the monitors declared in Monitor section)
\end_layout

\begin_layout NoteItem
Xorg examples are based on Xorg 1.4 and may not be valid for Xorg 1.5 or 1.6
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}{} % showadvanced
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Unknown elements
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Murphy's law}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Software evolve
\end_layout

\begin_layout Itemize
You don't know everything
\end_layout

\begin_layout Itemize
\begin_inset Flex CharStyle:Structure
status collapsed

\begin_layout Plain Layout
X-*
\end_layout

\end_inset

 parameters
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Declare a fallback}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Declare condition where an unknown element can be 
\emph on
accepted
\begin_inset Note Note
status open

\begin_layout Plain Layout

\emph on
New feature introduced with GSoC 2010.
 Thanks to Krzysztof Tyszecki and Google
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{accept specification}
\end_layout

\end_inset


\end_layout

\begin_layout Block
\begin_inset Graphics
	filename accept-spec.png
	width 100col%

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Configuration model creation
\end_layout

\begin_layout BeginFrame
Model analysis
\end_layout

\begin_layout Itemize
Read the application man pages:
\end_layout

\begin_deeper
\begin_layout Itemize
Find the structure of the tree
\end_layout

\begin_layout Itemize
Identify configuration parameters, their constraints and relations
\end_layout

\begin_layout Itemize
Decide what to do with unknown parameters (error or accept?)
\end_layout

\begin_layout Itemize
Identify potential upgrade issues (deprecated parameters mentioned in doc)
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Itemize
Find several valid examples:
\end_layout

\begin_deeper
\begin_layout Itemize
To verify that the documentation was understood
\end_layout

\begin_layout Itemize
For the non-regression tests
\end_layout

\end_deeper
\begin_layout BeginFrame
Model declaration
\end_layout

\begin_layout Standard
In summary, configuration documentation is translated into a format usable
 by Config::Model:
\end_layout

\begin_layout Itemize
The structure is translated into configuration classes
\end_layout

\begin_layout Itemize
Configuration parameters into elements
\end_layout

\begin_layout Itemize
Constraints into element attributes
\end_layout

\begin_layout NoteItem
Some constraints show that config may have a structure more complex than
 a tree.
 This structure may be in fact a graph.
 Declaring value element with type reference may be necessary for these
 more complex structures.
\end_layout

\begin_layout LyX-Code

\size footnotesize
name => 'Ssh',             # class name
\end_layout

\begin_layout LyX-Code

\size footnotesize
element => [
\end_layout

\begin_layout LyX-Code

\size footnotesize
  EnableSSHKeysign => {    # element name
\end_layout

\begin_layout LyX-Code

\size footnotesize
    type => 'leaf',
\end_layout

\begin_layout LyX-Code

\size footnotesize
    value_type => 'boolean', 
\end_layout

\begin_layout LyX-Code

\size footnotesize
    built_in => '0',       # default value
\end_layout

\begin_layout LyX-Code

\size footnotesize
    description => 'Setting ...',
\end_layout

\begin_layout LyX-Code

\size footnotesize
  },
\end_layout

\begin_layout LyX-Code

\size footnotesize
] 
\end_layout

\begin_layout Standard
See 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://sourceforge.net/apps/mediawiki/config-model/index.php?title=Creating_a_mode
l
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Declaration (easier mode)
\end_layout

\begin_layout Standard
Since writing a data structure is not fun (even with Perl), a model can
 be created with a GUI:
\end_layout

\begin_layout Standard
\begin_inset VSpace medskip
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename edit-model.png
	width 80text%

\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\color blue
From time to time, do a Menu → Model → test 
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifthenelse{
\backslash
equal{
\backslash
showreadwrite}{true}}{
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Reading configuration files
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{In the model}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Declare the mechanism (
\emph on
backend
\emph default
)
\end_layout

\begin_deeper
\begin_layout Itemize
Built-in (Perl file, Ini file...)
\end_layout

\begin_layout Itemize
Plug-in (Backend class)
\end_layout

\begin_layout Itemize
custom → call-back must also be provided
\end_layout

\end_deeper
\begin_layout Itemize
Mechanism parameters 
\end_layout

\begin_layout Itemize
Specifications are tried in order
\end_layout

\end_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code
\noindent

\size scriptsize
\begin_inset Graphics
	filename read-config.png
	width 80col%

\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout BeginFrame
Writing configuration files
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{In the model}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Not needed if write specification is the same as read
\end_layout

\begin_layout Itemize
Same parameters as read spec
\end_layout

\begin_layout Itemize
Tried in order until first success
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Note}
\end_layout

\end_inset


\end_layout

\begin_layout ExampleBlock
With these specifications, configuration can be migrated from one syntax
 to another.
\end_layout

\begin_layout Column
6cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Example}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code

\size scriptsize
write_config => [
\end_layout

\begin_layout LyX-Code

\size scriptsize
 {
\end_layout

\begin_layout LyX-Code

\size scriptsize
  backend     => 'augeas',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  save        => 'backup',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  config_dir  => '/etc/ssh',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  file        => 'sshd_config',
\end_layout

\begin_layout LyX-Code

\size scriptsize
 },
\end_layout

\begin_layout LyX-Code

\size scriptsize
 {
\end_layout

\begin_layout LyX-Code

\size scriptsize
  backend    => 'custom',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  class      => 'C::M::OpenSsh',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  function   => 'sshd_write',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  config_dir => '/etc/ssh'
\end_layout

\begin_layout LyX-Code

\size scriptsize
 }
\end_layout

\begin_layout LyX-Code

\size scriptsize
],
\size default
 
\end_layout

\end_deeper
\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}{
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Read/Write backend
\end_layout

\begin_layout Itemize
Does not require Perl knowledge to use one
\end_layout

\begin_layout Itemize
Ask if you need a new backend
\end_layout

\begin_layout Itemize
Current backend:
\end_layout

\begin_deeper
\begin_layout Itemize
YAML
\end_layout

\begin_layout Itemize
INI files
\end_layout

\begin_layout Itemize
Shell vars like
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

} %showreadwrite
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Prepare configuration updates
\end_layout

\begin_layout FrameSubtitle
For smooth upgrades
\end_layout

\begin_layout Standard
For application designers:
\end_layout

\begin_layout Enumerate
No new parameters 
\color green
<-> no new problems
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Enumerate
Picking parameter name and value : 
\color green
A good name is better than 3 pages of doc
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Enumerate
Default values : 
\color green
Application can work with an empty config file
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
But, if needed, model and backend can specify:
\end_layout

\begin_layout Itemize
How to replace a value 
\color green
(replace)
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Obsolete parameters 
\color green
(status)
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
How to migrate a value 
\color green
(migrate_from + formula)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Migration from one syntax with another 
\color green
(backends)
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
How to 
\color green
accept
\color inherit
 unknown parameters (e.g.
 leaf or list?)
\end_layout

\begin_layout Standard
For more information on migration applied to software packages, see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.debian.org/PackageConfigUpgrade
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
User point of view
\end_layout

\begin_layout BeginFrame
Configuration GUI 
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename config-edit-sshd-tk.png
	width 80text%

\end_inset


\end_layout

\begin_layout Standard

\size footnotesize
\color blue
Note: In the menu, change 
\begin_inset Quotes sld
\end_inset

Option → experience
\begin_inset Quotes srd
\end_inset

 to show more parameters
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifthenelse{
\backslash
equal{
\backslash
showotherui}{true}}{
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Wizard
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename config-edit-sshd-wizard.png
	width 80theight%

\end_inset


\end_layout

\begin_layout BeginFrame
Curse interface
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename config-edit-sshd-curses.png
	width 60text%

\end_inset


\end_layout

\begin_layout BeginFrame
Shell interface
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename config-edit-sshd-shell.png
	width 80text%

\end_inset


\end_layout

\begin_layout BeginFrame
Usage from programs
\end_layout

\begin_layout Standard
Command line:
\end_layout

\begin_layout LyX-Code

\size footnotesize
$ sudo config-edit-sshd -ui none PermitRootLogin=no 
\end_layout

\begin_layout LyX-Code

\size footnotesize
2009/05/15 14:03:28 load model Config/Model/models/Sshd.pl  
\end_layout

\begin_layout LyX-Code

\size footnotesize
2009/05/15 14:03:28 Creating class Sshd
\end_layout

\begin_layout LyX-Code

\size footnotesize
2009/05/15 14:03:29 Backing up file /etc/ssh/sshd_config
\end_layout

\begin_layout LyX-Code

\size footnotesize
2009/05/15 14:03:29 writing config file /etc/ssh/sshd_config 
\end_layout

\begin_layout Standard
Perl program:
\end_layout

\begin_layout LyX-Code

\size scriptsize
$ sudo perl -MConfig::Model -e '
\end_layout

\begin_layout LyX-Code

\size scriptsize
  my $i = Config::Model -> new -> instance(root_class_name=>"Sshd");
\end_layout

\begin_layout LyX-Code

\size scriptsize
  $i->config_root->load("PermitRootLogin=no");
\end_layout

\begin_layout LyX-Code

\size scriptsize
  $i->write_back;'
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}{} %showotherui
\end_layout

\begin_layout Plain Layout


\backslash
ifthenelse{
\backslash
equal{
\backslash
showaugeas}{true}}{
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Relation with Augeas project
\end_layout

\begin_layout BeginFrame
What is Augeas?
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Augeas is}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
RedHat Emerging technology project
\end_layout

\begin_layout Itemize
Augeas is a configuration editing tool (API, command line).
 
\end_layout

\begin_layout Itemize
Parses configuration files and transforms them into a tree.
\end_layout

\begin_layout Itemize
Tree structure and file syntax is described in a lens
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{Lens}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout LyX-Code

\size footnotesize
let key_re = /[A-Za-z0-9]+/ - /MACs|Match|AcceptEnv/
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code

\size footnotesize
let other_entry = 
\end_layout

\begin_layout LyX-Code

\size footnotesize
    let value = store /[^ 
\backslash
t
\backslash
n]+([ 
\backslash
t]+[^ 
\backslash
t
\backslash
n]+)*/ in 
\end_layout

\begin_layout LyX-Code

\size footnotesize
    [ key key_re .
 sep .
 value .
 eol ] 
\end_layout

\end_deeper
\begin_layout BeginFrame
Augeas pros and cons
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Pros}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Original structure and comments are kept
\end_layout

\begin_layout Itemize
Bidirectional transformation
\end_layout

\begin_layout Itemize
Common configuration API 
\end_layout

\begin_layout Itemize
Available in several languages
\end_layout

\begin_layout Itemize
Extensible by writing new lenses
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Cons}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Few semantic knowledge in Augeas lens
\end_layout

\begin_layout Itemize
Hard on users (no help, almost no validation)
\end_layout

\end_deeper
\begin_layout Standard

\size footnotesize
For more information on Augeas, see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://et.redhat.com/page/Main_Page
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Using Augeas from Config::Model
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{User gets best of both worlds}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Comments and structure are preserved by Augeas
\end_layout

\begin_layout Itemize
Usability and GUI provided by Config::Model
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Developer is not no lucky}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Must create model (for Config::Model)
\end_layout

\begin_layout Itemize
Must create lens (for Augeas)
\end_layout

\begin_layout Itemize
Both tree must have similar structure
\end_layout

\begin_layout Itemize
Declare Augeas backend in model (can be tricky)
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}{} %showaugeas
\end_layout

\begin_layout Plain Layout


\backslash
ifthenelse{
\backslash
equal{
\backslash
showpackageupgrade}{true}}{
\end_layout

\end_inset


\end_layout

\begin_layout Section
Package upgrades
\end_layout

\begin_layout BeginFrame
Configuration and package upgrades
\end_layout

\begin_layout Subtitle
Situation
\end_layout

\begin_layout Standard
Package upgrade:
\end_layout

\begin_layout Itemize
RedHat: Configuration evolutions leave rpm.new or rpm.save file
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
Debian: Configuration evolution either:
\end_layout

\begin_deeper
\begin_layout Itemize
trigger questions (often cryptic) 
\end_layout

\begin_layout Itemize
expose details to user with a diff
\end_layout

\begin_layout Itemize
leave spurious files (dpkg-new or dpkg-old)
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{In all cases}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Merging configuration requires good knowledge from user.
\end_layout

\end_deeper
\begin_layout BeginFrame
Configuration and package upgrades
\end_layout

\begin_layout Subtitle
Towards a solution?
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Proposal}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Use Config::Model to merge:
\end_layout

\begin_layout Itemize
user data from config file
\end_layout

\begin_layout Itemize
package/upstream evolutions from model
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Standard
Models with merge capability can be implemented by:
\end_layout

\begin_layout Itemize
Upstream projects
\end_layout

\begin_layout Itemize
Distributions (Debian, RedHat ...)
\end_layout

\begin_layout Itemize
Derived distribution (Knoppix, SkoleLinux ...)
\end_layout

\begin_layout Standard
Each can improve model coming from upstream
\end_layout

\end_deeper
\begin_layout Standard
See proposal for Debian: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.debian.org/PackageConfigUpgrade
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Migration example
\end_layout

\begin_layout Standard
sshd_config: TCPKeepAlive option was formerly called KeepAlive.
 
\end_layout

\begin_layout LyX-Code

\size scriptsize
KeepAlive => { value_type => 'enum',
\end_layout

\begin_layout LyX-Code

\size scriptsize
               status     => 'deprecated',
\end_layout

\begin_layout LyX-Code

\size scriptsize
               type       => 'leaf',
\end_layout

\begin_layout LyX-Code

\size scriptsize
               choice     => [ 'no', 'yes' ]
\end_layout

\begin_layout LyX-Code

\size scriptsize
             }, 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
TCPKeepAlive => { value_type => 'enum',
\end_layout

\begin_layout LyX-Code

\size scriptsize
                  type       => 'leaf',
\end_layout

\begin_layout LyX-Code

\size scriptsize
                  choice     => [ 'no', 'yes' ],
\end_layout

\begin_layout LyX-Code

\size scriptsize
                  migrate_from 
\end_layout

\begin_layout LyX-Code

\size scriptsize
                  => { formula   => '$keep_alive',
\end_layout

\begin_layout LyX-Code

\size scriptsize
                       variables => { keep_alive => '- KeepAlive' },
\end_layout

\begin_layout LyX-Code

\size scriptsize
                     }, 
\end_layout

\begin_layout BeginFrame
Coping with new parameter
\end_layout

\begin_layout ColumnsTopAligned

\end_layout

\begin_deeper
\begin_layout Column
9cm 
\end_layout

\begin_layout Standard
sshd_config: Accept new parameters, but emit a warning
\end_layout

\begin_layout LyX-Code

\size scriptsize
{
\end_layout

\begin_layout LyX-Code

\size scriptsize
  name => 'Sshd',
\end_layout

\begin_layout LyX-Code

\size scriptsize
  ...
\end_layout

\begin_layout LyX-Code

\size scriptsize
  accept => [ { 
\end_layout

\begin_layout LyX-Code

\size scriptsize
    name_match => '.*',  # default will match /^.*$/
\end_layout

\begin_layout LyX-Code

\size scriptsize
    type       => 'leaf',
\end_layout

\begin_layout LyX-Code

\size scriptsize
    value_type => 'uniline',
\end_layout

\begin_layout LyX-Code

\size scriptsize
    summary => 'boilerplate parameter that may hide a typo',
\end_layout

\begin_layout LyX-Code

\size scriptsize
    warn => 'Unknow parameter: please make sure there
\backslash
's '
\end_layout

\begin_layout LyX-Code

\size scriptsize
          .
 'no typo and contact the author'
\end_layout

\begin_layout LyX-Code

\size scriptsize
   }
\end_layout

\begin_layout LyX-Code
 ],
\end_layout

\begin_layout LyX-Code

\size scriptsize
}, 
\end_layout

\begin_layout Column
3cm
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename gsoc2010.png
	lyxscale 20
	width 100col%

\end_inset


\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ifthenelse{
\backslash
equal{
\backslash
showhairyupgrade}{true}}{
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Hairy upgrade example
\end_layout

\begin_layout Standard
Migrate from 
\emph on
url
\emph default
 to 
\emph on
host
\emph default
 and 
\emph on
path:
\end_layout

\begin_layout LyX-Code

\size scriptsize
url => { type => 'leaf', 
\end_layout

\begin_layout LyX-Code

\size scriptsize
         value_type => 'uniline', 
\end_layout

\begin_layout LyX-Code

\size scriptsize
         status => 'deprecated'},
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
host => { type => 'leaf', 
\end_layout

\begin_layout LyX-Code

\size scriptsize
          value_type => 'uniline',
\end_layout

\begin_layout LyX-Code

\size scriptsize
          migrate_from => { 
\end_layout

\begin_layout LyX-Code

\size scriptsize
            formula => '$old =~ m!http://([
\backslash
w
\backslash
.]+)!; $1 ;' ,
\end_layout

\begin_layout LyX-Code

\size scriptsize
            variables => { old => '- url' }
\end_layout

\begin_layout LyX-Code

\size scriptsize
            use_eval => 1 ,
\end_layout

\begin_layout LyX-Code

\size scriptsize
            },
\end_layout

\begin_layout LyX-Code

\size scriptsize
        }, 
\end_layout

\begin_layout Pause

\end_layout

\begin_layout LyX-Code

\size scriptsize
path => { type => 'leaf', 
\end_layout

\begin_layout LyX-Code

\size scriptsize
          value_type => 'uniline',
\end_layout

\begin_layout LyX-Code

\size scriptsize
          migrate_from => { 
\end_layout

\begin_layout LyX-Code

\size scriptsize
            formula => '$old =~ m!http://[
\backslash
w
\backslash
.]+(/.*)!; $1 ;',
\end_layout

\begin_layout LyX-Code

\size scriptsize
            variables => { old => '- url' }
\end_layout

\begin_layout LyX-Code

\size scriptsize
            use_eval => 1 ,
\end_layout

\begin_layout LyX-Code

\size scriptsize
            },
\end_layout

\begin_layout LyX-Code

\size scriptsize
        }, 
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}{} % hairyupgrade
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Package upgrade howto
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Debian}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In package build instructions (
\emph on
debian/rules
\emph default
 file):
\end_layout

\begin_layout LyX-Code
dh_config_model_upgrade --model_name Sshd 
\backslash

\end_layout

\begin_layout LyX-Code
--model_package libconfig-model-sshd-perl
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{RedHat}
\end_layout

\end_inset

In postinst:
\end_layout

\begin_deeper
\begin_layout LyX-Code
config-edit --model Sshd -ui none -save
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

}{} % showpackageupgrade
\end_layout

\end_inset


\end_layout

\begin_layout Section
Status
\end_layout

\begin_layout BeginFrame
Project status
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Available Models}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
OpenSsh
\end_layout

\begin_layout Itemize
Approx
\end_layout

\begin_layout Itemize
Dpkg Control Copyright
\end_layout

\begin_layout Itemize

\size scriptsize
Krb5
\end_layout

\begin_layout Itemize

\family typewriter
\size scriptsize
Xorg 
\end_layout

\begin_layout NoteItem
Xorg is still alpha code and moving too fast to follow.
 Krb5 is orphan
\end_layout

\begin_layout NoteItem
Out: exim (DSL) and other very complex configurations
\end_layout

\end_deeper
\begin_layout Pause

\end_layout

\begin_layout Column
5cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Backend}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize

\size small
INI syntax
\end_layout

\begin_layout Itemize

\size small
Perl 
\end_layout

\begin_layout Itemize

\size small
YAML
\end_layout

\begin_layout Itemize

\size small
Dpkg control
\end_layout

\begin_deeper
\begin_layout NoteItem
Specific serialized format (cds)
\end_layout

\end_deeper
\begin_layout Itemize

\size small
Augeas
\end_layout

\begin_deeper
\begin_layout NoteItem
Augeas provide a lot of possibilities to read and write files, but the adaptatio
n between Config::Model and Augeas is tricky
\end_layout

\end_deeper
\end_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Community}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Debian packages
\end_layout

\begin_layout Itemize
Rpm packages 
\end_layout

\begin_layout Itemize
Proposal and patches for dh_config (package upgrades)
\end_layout

\begin_layout Itemize
Article in GNULinux Mag France
\end_layout

\begin_layout Itemize
2010 GSoC project based on Config::Model
\end_layout

\end_deeper
\begin_layout BeginFrame
Future projects
\end_layout

\begin_layout ColumnsCenterAligned

\end_layout

\begin_deeper
\begin_layout Column
7cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{Interfaces}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Search parameters, values and help
\end_layout

\begin_layout Itemize
Annotations (e.g.
 comments) on-going
\end_layout

\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Column
4cm
\end_layout

\begin_layout Block
\begin_inset ERT
status open

\begin_layout Plain Layout

{backend}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
JSON
\end_layout

\begin_layout Itemize
XML
\end_layout

\begin_layout Itemize
Other?
\end_layout

\end_deeper
\end_deeper
\begin_layout Pause

\end_layout

\begin_layout ExampleBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{We need you !}
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Config::Model needs your help:
\end_layout

\begin_layout Itemize
Integration in distros
\end_layout

\begin_layout Itemize
Multi-level configuration 
\end_layout

\begin_deeper
\begin_layout NoteItem
Debian pure-blend project
\end_layout

\end_deeper
\begin_layout Itemize
Plug-in mechanism for models (Xorg drivers)
\end_layout

\begin_deeper
\begin_layout NoteItem
For applications with plug-ins
\end_layout

\end_deeper
\begin_layout Itemize
Define mechanism for configuration injection (e.g.
 mercurial viewer in Apache)
\end_layout

\end_deeper
\begin_layout BeginFrame
Links
\end_layout

\begin_layout Itemize
Config::Model site 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://config-model.wiki.sourceforge.net
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Config::Model on CPAN 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://search.cpan.org/dist/Config-Model/
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Config::Model user mailing list 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://lists.sourceforge.net/lists/listinfo/config-model-users
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
GNU/Linux Mag France n°117 and n°120 
\begin_inset Quotes sld
\end_inset

Config::Model - Créer un éditeur graphique de configuration avec Perl
\begin_inset Quotes srd
\end_inset

 (2 parts)
\end_layout

\begin_layout Itemize
Proposal to use Config::Model to upgrade configuration during Debian package
 upgrade 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://wiki.debian.org/PackageConfigUpgrade
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Augeas project 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://augeas.net
\end_layout

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
